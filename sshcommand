#!/usr/bin/env bash
set -eo pipefail

shopt -s nocasematch #For case insensitive string matching, for the first parameter

readonly OSRELEASE=/etc/os-release

log-fail() {
  declare desc="Log fail formatter"
  echo "$@" 1>&2
}

log-verbose() {
  declare desc="Log verbose formatter"
  if [[ ! -z "$SSHCOMMAND_VERBOSE_OUTPUT" ]]; then
    echo "$@"
  fi
}

f_print_os_name() {
  declare desc="Returns the release name of the operating system"
  sed -n 's#^NAME="\(.*\)"#\1#p' "$OSRELEASE" | sed 's/./\L&/g'
  return 0
}

f_adduser() {
  declare desc="Add a user to the system"
  local l_user l_platform

  l_user=$1
  l_platform="$(f_print_os_name)"
  case $l_platform in
    debian*|ubuntu|raspbian*)
      adduser --disabled-password --gecos "" "$l_user"
      ;;
    *)
      useradd -m -s /bin/bash "$l_user"
      groupadd "$l_user"
      usermod -L -aG "$l_user" "$l_user"
      ;;
  esac
}

sshcommand-create() {
  declare desc="Creates an sshcommand for a specific user"
  declare USER="$2" COMMAND="$3"
  local USERHOME

  if [[ -z "$USER" ]] || [[ -z "$COMMAND" ]]; then
    log-fail "Usage : sshcommand create user command"
    exit -1
  fi

  if id -u "$USER" >/dev/null 2>&1; then
    log-verbose "User '$USER' already exists"
  else
    f_adduser "$USER"
  fi

  USERHOME=$(sh -c "echo ~$USER")
  mkdir -p "$USERHOME/.ssh"
  touch "$USERHOME/.ssh/authorized_keys"
  echo "$COMMAND" > "$USERHOME/.sshcommand"
  chown -R "$USER" "$USERHOME"
}

sshcommand-acl-add() {
  declare desc="Adds an ssh public key by an identifier to a user"
  declare USER="$2" IDENTIFIER="$3"
  local FINGERPRINT KEY KEY_FILE KEY_PREFIX NEW_KEY USERHOME

  if [[ -z "$USER" ]] || [[ -z "$IDENTIFIER" ]]; then
    log-fail "Usage : sshcommand acl-add user identifier"
    exit -1
  fi

  getent passwd "$USER" > /dev/null || false
  USERHOME=$(sh -c "echo ~$USER")

  NEW_KEY=$(grep "NAME=\\\\\"$IDENTIFIER"\\\\\" "$USERHOME/.ssh/authorized_keys" || true)
  if [[ ! -z "$NEW_KEY" ]]; then
    log-fail "Duplicate SSH Key name"
    exit -1
  fi

  KEY_FILE=$(mktemp)
  KEY=$(tee "$KEY_FILE")
  delete_key_file() {
    rm -f "$KEY_FILE"
  }
  trap delete_key_file INT EXIT
  FINGERPRINT=$(ssh-keygen -lf "$KEY_FILE" | awk '{print $2}')

  if [[ ! "$FINGERPRINT" =~ :.* ]]; then
    log-fail "Invalid ssh public key"
    exit -1
  fi

  KEY_PREFIX="command=\"FINGERPRINT=$FINGERPRINT NAME=\\\"$IDENTIFIER\\\" \`cat $USERHOME/.sshcommand\` \$SSH_ORIGINAL_COMMAND\",no-agent-forwarding,no-user-rc,no-X11-forwarding,no-port-forwarding"
  echo "$KEY_PREFIX $KEY" >> "$USERHOME/.ssh/authorized_keys"
  echo "$FINGERPRINT"
}

sshcommand-acl-remove() {
  declare desc="Adds an identifier from a user"
  declare USER="$2" IDENTIFIER="$3"
  local USERHOME

  if [[ -z "$USER" ]] || [[ -z "$IDENTIFIER" ]]; then
    log-fail "Usage : sshcommand acl-remove user identifier"
    exit -1
  fi

  getent passwd "$USER" > /dev/null || false
  USERHOME=$(sh -c "echo ~$USER")

  sed --in-place "/ NAME=\\\\\"$IDENTIFIER\\\\\" /d" "$USERHOME/.ssh/authorized_keys"
}

sshcommand-help() {
  declare desc="Shows help information"
  echo "Usage : sshcommand create user command"
  echo "        sshcommand acl-add user identifier"
  echo "        sshcommand acl-remove user identifier"
  echo "        sshcommand help # shows this usage message"
}

main() {
  if [[ -z "$1" ]]; then
    sshcommand-help
    exit 1
  fi

  case "$1" in
    create) # sshcommand create <user> <command>
      sshcommand-create "$@"
      ;;

    acl-add) # sshcommand acl-add <user> <identifier>
      sshcommand-acl-add "$@"
      ;;

    acl-remove) # sshcommand acl-remove <user> <identifier>
      sshcommand-acl-remove "$@"
      ;;

    help) # sshcommand help
      sshcommand-help
      ;;

    *)
      log-fail "invalid command"
      exit 1
  esac
}

main "$@"
